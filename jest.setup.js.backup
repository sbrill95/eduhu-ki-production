import '@testing-library/jest-dom'

// Mock external dependencies first (before any imports)
jest.mock('@instantdb/react', () => ({
  init: jest.fn(() => ({
    transact: jest.fn(),
    query: jest.fn(() => ({
      data: {},
      isLoading: false,
      error: null
    })),
    useQuery: jest.fn(() => ({
      data: {},
      isLoading: false,
      error: null
    }))
  })),
  i: {
    schema: jest.fn(() => ({})),
    entity: jest.fn(() => ({})),
    string: jest.fn(() => ({ optional: jest.fn(() => ({})) })),
    number: jest.fn(() => ({ optional: jest.fn(() => ({})) })),
    boolean: jest.fn(() => ({ optional: jest.fn(() => ({})) })),
    json: jest.fn(() => ({ optional: jest.fn(() => ({})) })),
    any: jest.fn(() => ({ optional: jest.fn(() => ({})) }))
  }
}))

jest.mock('@instantdb/core', () => ({
  init: jest.fn(() => ({
    transact: jest.fn(),
    query: jest.fn(() => Promise.resolve({ data: {} }))
  })),
  i: {
    schema: jest.fn(() => ({})),
    entity: jest.fn(() => ({})),
    string: jest.fn(() => ({ optional: jest.fn(() => ({})) })),
    number: jest.fn(() => ({ optional: jest.fn(() => ({})) })),
    boolean: jest.fn(() => ({ optional: jest.fn(() => ({})) })),
    json: jest.fn(() => ({ optional: jest.fn(() => ({})) })),
    any: jest.fn(() => ({ optional: jest.fn(() => ({})) }))
  }
}))

jest.mock('openai', () => ({
  OpenAI: jest.fn().mockImplementation(() => ({
    chat: {
      completions: {
        create: jest.fn(() => Promise.resolve({
          choices: [{
            message: { content: 'Mock AI response' }
          }]
        }))
      }
    },
    embeddings: {
      create: jest.fn(() => Promise.resolve({
        data: [{ embedding: new Array(1536).fill(0.1) }]
      }))
    }
  }))
}))

jest.mock('@aws-sdk/client-s3', () => ({
  S3Client: jest.fn().mockImplementation(() => ({
    send: jest.fn(() => Promise.resolve({}))
  })),
  PutObjectCommand: jest.fn(),
  GetObjectCommand: jest.fn(),
  DeleteObjectCommand: jest.fn(),
  HeadObjectCommand: jest.fn()
}))

jest.mock('@aws-sdk/s3-request-presigner', () => ({
  getSignedUrl: jest.fn(() => Promise.resolve('https://mock-presigned-url.com'))
}))

jest.mock('fs/promises', () => ({
  readFile: jest.fn(() => Promise.resolve(Buffer.from('mock file content'))),
  writeFile: jest.fn(() => Promise.resolve()),
  access: jest.fn(() => Promise.resolve()),
  stat: jest.fn(() => Promise.resolve({
    size: 1024,
    isFile: () => true,
    isDirectory: () => false,
    mtime: new Date(),
    birthtime: new Date()
  })),
  unlink: jest.fn(() => Promise.resolve()),
  mkdir: jest.fn(() => Promise.resolve())
}))

jest.mock('fs', () => ({
  existsSync: jest.fn(() => true),
  createReadStream: jest.fn(() => ({
    pipe: jest.fn(),
    on: jest.fn(),
    destroy: jest.fn()
  }))
}))

jest.mock('path', () => ({
  join: jest.fn((...paths) => paths.join('/')),
  resolve: jest.fn((...paths) => '/' + paths.join('/')),
  dirname: jest.fn((p) => p.split('/').slice(0, -1).join('/')),
  basename: jest.fn((p) => p.split('/').pop()),
  extname: jest.fn((p) => '.' + p.split('.').pop()),
  normalize: jest.fn((p) => p),
  relative: jest.fn(() => 'relative/path')
}))

// Mock IntersectionObserver for components that might use it
global.IntersectionObserver = jest.fn().mockImplementation(() => ({
  observe: jest.fn(),
  unobserve: jest.fn(),
  disconnect: jest.fn(),
}))

// Mock ResizeObserver for responsive components
global.ResizeObserver = jest.fn().mockImplementation(() => ({
  observe: jest.fn(),
  unobserve: jest.fn(),
  disconnect: jest.fn(),
}))

// Mock window.matchMedia for responsive design tests (only in jsdom environment)
if (typeof window !== 'undefined') {
  Object.defineProperty(window, 'matchMedia', {
    writable: true,
    value: jest.fn().mockImplementation(query => ({
      matches: false,
      media: query,
      onchange: null,
      addListener: jest.fn(), // deprecated
      removeListener: jest.fn(), // deprecated
      addEventListener: jest.fn(),
      removeEventListener: jest.fn(),
      dispatchEvent: jest.fn(),
    })),
  })
}

// Mock window.scrollTo for tests (only in jsdom environment)
if (typeof global.scrollTo === 'undefined') {
  global.scrollTo = jest.fn()
}

// Suppress console.log in tests unless VERBOSE_TESTS is set
if (!process.env.VERBOSE_TESTS) {
  global.console = {
    ...console,
    log: jest.fn(),
    info: jest.fn(),
    warn: jest.fn(),
  }
}

// Mock Service Worker for PWA tests (only in browser environment)
if (typeof navigator !== 'undefined' && navigator) {
  global.navigator.serviceWorker = {
    register: jest.fn(() => Promise.resolve()),
    ready: Promise.resolve({
      unregister: jest.fn(() => Promise.resolve()),
    }),
  }
}

// Set up fake timers by default (can be overridden in individual tests)
beforeEach(() => {
  jest.useFakeTimers()
})

afterEach(() => {
  jest.runOnlyPendingTimers()
  jest.useRealTimers()
})

// Clean up mocks after each test
afterEach(() => {
  jest.clearAllMocks()
})