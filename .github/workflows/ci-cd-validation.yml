# CI/CD Validation Workflow
# Validates the modern test infrastructure and deployment compatibility

name: CI/CD Validation

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch: # Allow manual trigger

# Environment variables for consistent configuration
env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'
  CI: true

# Permissions for deployment and security scanning
permissions:
  contents: read
  security-events: write
  pull-requests: write
  checks: write

jobs:
  # Dependency and security validation
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level high
        continue-on-error: true

      - name: Run dependency check
        run: |
          echo "Checking for known vulnerabilities..."
          npx audit-ci --config audit-ci.json
        continue-on-error: true

  # Linting and code quality
  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint (new flat config)
        run: npm run lint:check

      - name: Check TypeScript compilation
        run: npx tsc --noEmit

      - name: Validate Next.js configuration
        run: npx next build --dry-run
        continue-on-error: true

  # Unit and integration tests
  test-suite:
    name: Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 20

    strategy:
      matrix:
        test-type: [unit, integration]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ${{ matrix.test-type }} tests
        run: |
          if [ "${{ matrix.test-type }}" = "unit" ]; then
            npm run test:unit -- --coverage --ci --watchAll=false
          else
            npm run test:integration -- --coverage --ci --watchAll=false
          fi
        env:
          CI: true
          NODE_ENV: test

      - name: Upload coverage reports
        if: always()
        uses: codecov/codecov-action@v3
        with:
          directory: ./coverage
          flags: ${{ matrix.test-type }}
          name: ${{ matrix.test-type }}-coverage
          fail_ci_if_error: false

      - name: Upload test results
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: ${{ matrix.test-type }}-tests
          path: 'test-results/jest/results.xml'
          reporter: jest-junit

  # End-to-end tests
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production
          NEXT_PUBLIC_INSTANT_APP_ID: demo-test-id
          OPENAI_API_KEY: sk-test-key
          NEXTAUTH_SECRET: test-secret

      - name: Start application
        run: npm start &
        env:
          NODE_ENV: production
          PORT: 3000

      - name: Wait for application
        run: npx wait-on http://localhost:3000 --timeout 60000

      - name: Run Playwright tests
        run: npm run test:e2e
        env:
          CI: true
          PLAYWRIGHT_BASE_URL: http://localhost:3000

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

  # Edge Runtime compatibility validation
  edge-runtime-validation:
    name: Edge Runtime Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Validate Edge Runtime compatibility
        run: |
          echo "Checking for Edge Runtime incompatible imports..."

          # Check for React hooks in API routes
          if grep -r "useQuery\|useEffect\|useState" src/app/api/ ; then
            echo "‚ùå Found React hooks in API routes - incompatible with Edge Runtime"
            exit 1
          else
            echo "‚úÖ No React hooks found in API routes"
          fi

          # Check for Node.js specific APIs that aren't supported in Edge Runtime
          if grep -r "fs\.\|path\.\|os\.\|child_process" src/app/api/ ; then
            echo "‚ö†Ô∏è Found Node.js specific APIs - may not be compatible with Edge Runtime"
          else
            echo "‚úÖ No problematic Node.js APIs found"
          fi

          # Check for canvas usage
          if grep -r "canvas\|createCanvas" src/app/api/ ; then
            echo "‚ùå Found canvas usage - incompatible with Edge Runtime"
            exit 1
          else
            echo "‚úÖ No canvas usage found in API routes"
          fi

      - name: Test Edge Runtime API routes
        run: |
          echo "Testing Edge Runtime API routes build..."
          npx next build

          # Validate that API routes are properly configured for Edge Runtime
          if [ -f ".next/server/app/api/chat/route.js" ]; then
            echo "‚úÖ Chat API route built successfully"
          else
            echo "‚ùå Chat API route build failed"
            exit 1
          fi

  # Performance and build validation
  build-validation:
    name: Build Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production
          NEXT_PUBLIC_INSTANT_APP_ID: demo-test-id
          OPENAI_API_KEY: sk-test-key
          NEXTAUTH_SECRET: test-secret

      - name: Analyze bundle
        run: |
          echo "Bundle analysis..."
          if [ -f ".next/analyze/client.html" ]; then
            echo "‚úÖ Client bundle analysis available"
          fi

          # Check for large bundles that might affect performance
          find .next/static/chunks -name "*.js" -size +1M -exec echo "‚ö†Ô∏è Large bundle: {}" \;

      - name: Test production build
        run: |
          npm start &
          SERVER_PID=$!

          # Wait for server to start
          npx wait-on http://localhost:3000 --timeout 30000

          # Basic health check
          curl -f http://localhost:3000/api/health || exit 1

          # Kill server
          kill $SERVER_PID
        env:
          NODE_ENV: production
          PORT: 3000

  # Deployment readiness check
  deployment-readiness:
    name: Deployment Readiness
    runs-on: ubuntu-latest
    needs: [security-audit, lint-and-format, test-suite, edge-runtime-validation, build-validation]
    if: always()
    timeout-minutes: 5

    steps:
      - name: Check deployment readiness
        run: |
          echo "Deployment Readiness Summary"
          echo "=========================="

          # Check if all required jobs passed
          if [ "${{ needs.security-audit.result }}" = "success" ] && \
             [ "${{ needs.lint-and-format.result }}" = "success" ] && \
             [ "${{ needs.test-suite.result }}" = "success" ] && \
             [ "${{ needs.edge-runtime-validation.result }}" = "success" ] && \
             [ "${{ needs.build-validation.result }}" = "success" ]; then
            echo "üéâ All checks passed - Ready for deployment!"
            exit 0
          else
            echo "‚ùå Some checks failed:"
            echo "  Security Audit: ${{ needs.security-audit.result }}"
            echo "  Lint & Format: ${{ needs.lint-and-format.result }}"
            echo "  Test Suite: ${{ needs.test-suite.result }}"
            echo "  Edge Runtime: ${{ needs.edge-runtime-validation.result }}"
            echo "  Build: ${{ needs.build-validation.result }}"
            exit 1
          fi

      - name: Notify on failure
        if: failure()
        run: |
          echo "üö® Deployment readiness check failed!"
          echo "Please review the failed jobs and fix the issues before deploying."