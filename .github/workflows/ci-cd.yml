name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

env:
  NODE_VERSION: '18.x'
  NEXT_PUBLIC_INSTANTDB_APP_ID: ${{ secrets.NEXT_PUBLIC_INSTANTDB_APP_ID }}
  NEXT_PUBLIC_AI_MODEL: 'gpt-4o-mini'
  STORAGE_PROVIDER: ${{ secrets.STORAGE_PROVIDER || 's3' }}

  # AWS S3 Configuration
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_S3_BUCKET_NAME: ${{ secrets.AWS_S3_BUCKET_NAME }}
  AWS_S3_REGION: ${{ secrets.AWS_S3_REGION || 'us-east-1' }}

  # CloudFlare R2 Configuration (alternative)
  R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
  R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
  R2_BUCKET_NAME: ${{ secrets.R2_BUCKET_NAME }}
  R2_ACCOUNT_ID: ${{ secrets.R2_ACCOUNT_ID }}
  R2_ENDPOINT: ${{ secrets.R2_ENDPOINT }}

jobs:
  # Code Quality & Testing
  test:
    name: 'Test & Quality Checks'
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Type checking
        run: npx tsc --noEmit

      - name: Lint code
        run: npm run lint

      - name: Run unit tests
        run: npm run test:unit
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: Run integration tests
        run: npm run test:integration
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: Test storage integration
        run: |
          # Test storage configuration based on provider
          node -e "
            const { createStorageAdapter } = require('./src/lib/file-storage');

            console.log('Testing storage configuration...');
            console.log('Storage Provider:', process.env.STORAGE_PROVIDER || 'local');

            try {
              const adapter = createStorageAdapter();
              if (adapter) {
                console.log('✅ Storage adapter created successfully');
                if (adapter.isConfigured && adapter.isConfigured()) {
                  console.log('✅ Storage adapter is properly configured');
                } else {
                  console.log('⚠️ Storage adapter created but may not be fully configured');
                }
              } else {
                console.log('✅ Using local storage (development mode)');
              }
            } catch (error) {
              console.log('❌ Storage adapter test failed:', error.message);
              process.exit(1);
            }
          "
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

  # Build validation
  build:
    name: 'Build Validation'
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: Check build output
        run: |
          if [ ! -d ".next" ]; then
            echo "❌ Build failed - .next directory not found"
            exit 1
          fi
          echo "✅ Build successful"

  # End-to-end testing
  e2e:
    name: 'E2E Tests'
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Build application
        run: npm run build
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: Start application
        run: npm run start &
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          PORT: 3000

      - name: Wait for application
        run: |
          timeout 60 bash -c 'until curl -s http://localhost:3000/api/health; do sleep 2; done'

      - name: Run E2E tests
        run: npm run test:e2e

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: e2e-test-results
          path: |
            test-results/
            playwright-report/
          retention-days: 7

  # Security scanning
  security:
    name: 'Security Scan'
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Check for known vulnerabilities
        run: |
          # Check for sensitive information in code
          if grep -r "sk-" src/ --exclude-dir=node_modules || \
             grep -r "your-.*-key" src/ --exclude-dir=node_modules || \
             grep -r "password.*=" src/ --exclude-dir=node_modules; then
            echo "❌ Potential secrets found in source code"
            exit 1
          fi
          echo "✅ No obvious secrets found"

  # Storage environment validation
  storage-validation:
    name: 'Storage Environment Validation'
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    timeout-minutes: 5

    steps:
      - name: Validate storage configuration
        run: |
          echo "Validating storage configuration for production deployment..."

          # Check storage provider
          STORAGE_PROVIDER="${{ env.STORAGE_PROVIDER }}"
          echo "Storage Provider: $STORAGE_PROVIDER"

          case $STORAGE_PROVIDER in
            s3)
              if [[ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" || -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" || -z "${{ secrets.AWS_S3_BUCKET_NAME }}" ]]; then
                echo "❌ AWS S3 configuration incomplete"
                echo "Required: AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_S3_BUCKET_NAME"
                exit 1
              fi
              echo "✅ AWS S3 configuration validated"
              ;;
            r2)
              if [[ -z "${{ secrets.R2_ACCESS_KEY_ID }}" || -z "${{ secrets.R2_SECRET_ACCESS_KEY }}" || -z "${{ secrets.R2_BUCKET_NAME }}" || -z "${{ secrets.R2_ACCOUNT_ID }}" ]]; then
                echo "❌ CloudFlare R2 configuration incomplete"
                echo "Required: R2_ACCESS_KEY_ID, R2_SECRET_ACCESS_KEY, R2_BUCKET_NAME, R2_ACCOUNT_ID"
                exit 1
              fi
              echo "✅ CloudFlare R2 configuration validated"
              ;;
            local)
              echo "⚠️ Using local storage for production is not recommended"
              ;;
            *)
              echo "❌ Unknown storage provider: $STORAGE_PROVIDER"
              exit 1
              ;;
          esac

  # Deployment to preview (on PR) or production (on main)
  deploy:
    name: 'Deploy to Vercel'
    runs-on: ubuntu-latest
    needs: [test, build, e2e, security]
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Validate storage configuration pre-deployment
        run: |
          echo "Pre-deployment storage validation..."
          node -e "
            const { createStorageAdapter } = require('./src/lib/file-storage');

            console.log('Storage Provider:', process.env.STORAGE_PROVIDER || 'local');

            try {
              const adapter = createStorageAdapter();
              if (adapter) {
                console.log('✅ Storage adapter configuration validated');
                if (adapter.getBucketInfo) {
                  const info = adapter.getBucketInfo();
                  console.log('Bucket info:', JSON.stringify(info, null, 2));
                }
              } else {
                console.log('✅ Using local storage fallback');
              }
            } catch (error) {
              console.log('⚠️ Storage validation warning:', error.message);
              console.log('Deployment will continue with fallback storage');
            }
          "

      - name: Deploy to Vercel (Production)
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./
        env:
          # Ensure environment variables are passed to Vercel
          VERCEL_ENV_STORAGE_PROVIDER: ${{ env.STORAGE_PROVIDER }}

      - name: Deploy to Vercel (Preview)
        if: github.event_name == 'pull_request'
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./
        env:
          # Use staging configuration for previews
          VERCEL_ENV_STORAGE_PROVIDER: ${{ env.STORAGE_PROVIDER }}

  # Post-deployment validation
  validate-deployment:
    name: 'Validate Deployment'
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    timeout-minutes: 5

    steps:
      - name: Wait for deployment
        run: sleep 30

      - name: Check health endpoint
        run: |
          HEALTH_URL="https://${{ secrets.VERCEL_DOMAIN }}/api/health"
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "$HEALTH_URL")

          if [ "$RESPONSE" -eq 200 ]; then
            echo "✅ Health check passed (HTTP $RESPONSE)"
          else
            echo "❌ Health check failed (HTTP $RESPONSE)"
            exit 1
          fi

      - name: Test PWA manifest
        run: |
          MANIFEST_URL="https://${{ secrets.VERCEL_DOMAIN }}/manifest.json"
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "$MANIFEST_URL")

          if [ "$RESPONSE" -eq 200 ]; then
            echo "✅ PWA manifest accessible (HTTP $RESPONSE)"
          else
            echo "❌ PWA manifest failed (HTTP $RESPONSE)"
            exit 1
          fi

  # Performance monitoring
  lighthouse:
    name: 'Lighthouse Performance Audit'
    runs-on: ubuntu-latest
    needs: validate-deployment
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            https://${{ secrets.VERCEL_DOMAIN }}
            https://${{ secrets.VERCEL_DOMAIN }}/chat
          configPath: ./.lighthouserc.json
          uploadArtifacts: true
          temporaryPublicStorage: true